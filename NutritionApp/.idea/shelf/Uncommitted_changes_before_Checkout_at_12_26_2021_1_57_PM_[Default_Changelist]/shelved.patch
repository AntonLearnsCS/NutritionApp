Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*plugins {\r\n    id(\"com.google.secrets_gradle_plugin\") version \"0.6.1\"\r\n  *//*  id('com.android.application')\r\n    id('kotlin-android')\r\n    id('kotlin-kapt')\r\n    id(\"androidx.navigation.safeargs.kotlin\")\r\n    id('com.google.gms.google-services')*//*\r\n}*/\r\n\r\napply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-kapt'\r\napply plugin: \"androidx.navigation.safeargs.kotlin\"\r\napply plugin: 'com.google.gms.google-services'\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.nutritionapp\"\r\n        minSdkVersion rootProject.minSdkVersion\r\n        targetSdkVersion rootProject.targetSdkVersion\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        multiDexEnabled true\r\n    }\r\n\r\n    configurations.all {\r\n        resolutionStrategy {\r\n            exclude group: \"org.jetbrains.kotlinx\", module: \"kotlinx-coroutines-debug\"\r\n        }\r\n    }\r\n    buildTypes {\r\n        debug {\r\n            buildConfigField 'String', \"MAPS_API_KEY\", MAPS_API_KEY\r\n            resValue 'string', \"MAPS_API_KEY\", MAPS_API_KEY\r\n        }\r\n        release {\r\n            buildConfigField 'String', \"MAPS_API_KEY\", MAPS_API_KEY\r\n            resValue 'string', \"MAPS_API_KEY\", MAPS_API_KEY\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    lintOptions {\r\n        disable 'NullSafeMutableLiveData'\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n    testOptions.unitTests {\r\n        includeAndroidResources = true\r\n        returnDefaultValues = true\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility 1.8\r\n        targetCompatibility 1.8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\r\n    }\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n /*   buildTypes.each {\r\n        it.buildConfigField \"String\", \"Maps_API_KEY\", \"MAPS_API_KEY\"\r\n    }*/\r\n}\r\n\r\ndependencies {\r\n    //include all JARs in the local repository.\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n//    implementation files(sdkDir+'/platforms/android-29/android.jar')\r\n\r\n    // App dependencies\r\n    implementation \"androidx.appcompat:appcompat:$appCompatVersion\"\r\n    implementation \"androidx.legacy:legacy-support-v4:$androidXLegacySupport\"\r\n    implementation \"androidx.annotation:annotation:$androidXAnnotations\"\r\n\r\n    implementation \"androidx.cardview:cardview:$cardVersion\"\r\n    implementation \"com.google.android.material:material:$materialVersion\"\r\n    implementation \"androidx.recyclerview:recyclerview:$recyclerViewVersion\"\r\n    implementation \"androidx.constraintlayout:constraintlayout:$constraintVersion\"\r\n\r\n    implementation 'com.google.code.gson:gson:2.8.5'\r\n\r\n    // Architecture Components\r\n    //Navigation dependencies\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-rc1'\r\n    kapt \"androidx.lifecycle:lifecycle-compiler:$archLifecycleVersion\"\r\n    implementation \"androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion\"\r\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion\"\r\n    implementation \"androidx.navigation:navigation-fragment-ktx:$navigationVersion\"\r\n    implementation \"androidx.navigation:navigation-ui-ktx:$navigationVersion\"\r\n    implementation \"androidx.test.espresso:espresso-idling-resource:$espressoVersion\"\r\n\r\n    //Room dependencies\r\n    implementation \"androidx.room:room-ktx:$roomVersion\"\r\n    implementation \"androidx.room:room-runtime:$roomVersion\"\r\n    kapt \"androidx.room:room-compiler:$roomVersion\"\r\n\r\n    //Coroutines Dependencies\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion\"\r\n\r\n    //Koin\r\n    implementation \"org.koin:koin-android:$koinVersion\"\r\n    implementation \"org.koin:koin-androidx-viewmodel:$koinVersion\"\r\n\r\n// Koin testing tools\r\n    testImplementation \"io.insert-koin:koin-test:$koinVersion\"\r\n    // Needed JUnit version\r\n    //testImplementation \"io.insert-koin:koin-test-junit4:2.0.1\"\r\n    testImplementation 'org.koin:koin-test:2.0.1'\r\n    // Dependencies for local unit tests\r\n    testImplementation \"junit:junit:$junitVersion\"\r\n    testImplementation \"org.hamcrest:hamcrest-all:$hamcrestVersion\"\r\n    testImplementation \"androidx.arch.core:core-testing:$archTestingVersion\"\r\n    testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion\"\r\n    testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion\"\r\n    testImplementation \"org.robolectric:robolectric:$robolectricVersion\"\r\n    testImplementation \"com.google.truth:truth:$truthVersion\"\r\n    testImplementation \"org.mockito:mockito-core:$mockitoVersion\"\r\n\r\n    // AndroidX Test - JVM testing\r\n    testImplementation \"androidx.test:core-ktx:$androidXTestCoreVersion\"\r\n    testImplementation \"androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion\"\r\n    testImplementation \"androidx.test:rules:$androidXTestRulesVersion\"\r\n\r\n    // AndroidX Test - Instrumented testing\r\n    androidTestImplementation \"androidx.test:core-ktx:$androidXTestCoreVersion\"\r\n    androidTestImplementation \"androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion\"\r\n    androidTestImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion\"\r\n    androidTestImplementation \"androidx.test:rules:$androidXTestRulesVersion\"\r\n    androidTestImplementation \"androidx.room:room-testing:$roomVersion\"\r\n    androidTestImplementation \"androidx.arch.core:core-testing:$archTestingVersion\"\r\n    androidTestImplementation \"org.robolectric:annotations:$robolectricVersion\"\r\n    androidTestImplementation \"androidx.test.espresso:espresso-core:$espressoVersion\"\r\n    androidTestImplementation \"androidx.test.espresso:espresso-contrib:$espressoVersion\"\r\n    androidTestImplementation \"androidx.test.espresso:espresso-intents:$espressoVersion\"\r\n    androidTestImplementation \"androidx.test.espresso.idling:idling-concurrent:$espressoVersion\"\r\n    //For Espresso-intent\r\n    androidTestImplementation('androidx.test:runner:1.4.0')\r\n    androidTestImplementation('androidx.test:rules:1.4.0')\r\n    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0')\r\n    androidTestImplementation \"junit:junit:$junitVersion\"\r\n\r\n\r\n    // Once https://issuetracker.google.com/127986458 is fixed this can be testImplementation\r\n    implementation \"androidx.fragment:fragment-testing:$fragmentVersion\"\r\n    implementation \"androidx.activity:activity:1.3.1\"\r\n    implementation \"androidx.fragment:fragment:1.3.6\"\r\n\r\n    implementation \"androidx.test:core:$androidXTestCoreVersion\"\r\n    implementation \"androidx.fragment:fragment:$fragmentVersion\"\r\n    androidTestImplementation \"org.mockito:mockito-core:$mockitoVersion\"\r\n    androidTestImplementation \"com.linkedin.dexmaker:dexmaker-mockito:$dexMakerVersion\"\r\n    androidTestImplementation('org.koin:koin-test:2.0.1') { exclude group: 'org.mockito' }\r\n\r\n\r\n\r\n    //Maps & Geofencing\r\n    implementation \"com.google.android.gms:play-services-location:$playServicesVersion\"\r\n    implementation \"com.google.android.gms:play-services-maps:$playServicesVersion\"\r\n\r\n    //firebase\r\n    implementation 'com.firebaseui:firebase-ui-auth:5.0.0'\r\n\r\n    //Timber\r\n    implementation 'com.jakewharton.timber:timber:5.0.1'\r\n    androidTestImplementation \"com.jakewharton.timber:timber:5.0.1\"\r\n\r\n    //geocoder\r\n    implementation 'com.google.android.libraries.places:places:2.4.0'\r\n    testImplementation 'com.google.android.libraries.places:places:2.4.0'\r\n\r\n    // For developers using AndroidX in their applications\r\n    implementation 'pub.devrel:easypermissions:3.0.0'\r\n    implementation \"androidx.core:core-ktx:1.6.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\r\n\r\n    //firebase\r\n    //implementation platform('com.google.firebase:firebase-bom:28.4.1')\r\n    //implementation 'com.google.firebase:firebase-analytics-ktx'\r\n\r\n    // Retrofit Coroutines Support\r\n    implementation \"com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter\"\r\n\r\n    // Retrofit with Moshi Converter\r\n    implementation \"com.squareup.retrofit2:converter-moshi:$version_retrofit\"\r\n    // Moshi\r\n    implementation \"com.squareup.moshi:moshi:$version_moshi\"\r\n    implementation \"com.squareup.moshi:moshi-kotlin:$version_moshi\"\r\n\r\n    implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\r\n\r\n    //Glide\r\n    implementation \"com.github.bumptech.glide:glide:4.8.0\"\r\n\r\n    implementation \"com.squareup.okhttp3:logging-interceptor:4.0.1\"\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 7605b6b519fc8446ffb44dbc81ef0e6f5d4b920a)
+++ b/app/build.gradle	(date 1640554661364)
@@ -93,7 +93,7 @@
     implementation 'androidx.constraintlayout:constraintlayout:2.0.0-rc1'
     kapt "androidx.lifecycle:lifecycle-compiler:$archLifecycleVersion"
     implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
-    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
+    //implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
     implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
     implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
     implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
@@ -106,7 +106,7 @@
 
     //Coroutines Dependencies
     implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
-
+    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"
     //Koin
     implementation "org.koin:koin-android:$koinVersion"
     implementation "org.koin:koin-androidx-viewmodel:$koinVersion"
@@ -182,6 +182,9 @@
     implementation 'pub.devrel:easypermissions:3.0.0'
     implementation "androidx.core:core-ktx:1.6.0"
     implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
+
+
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
 
     //firebase
Index: app/src/main/java/com/example/nutritionapp/ingredientlist/IngredientViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.nutritionapp.ingredientlist\r\n\r\n//import androidx.test.core.app.ApplicationProvider\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.net.ConnectivityManager\r\nimport android.net.NetworkCapabilities\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.databinding.Observable\r\nimport androidx.databinding.PropertyChangeRegistry\r\nimport androidx.lifecycle.*\r\nimport androidx.test.core.app.ApplicationProvider\r\nimport com.example.nutritionapp.database.IngredientDataClass\r\nimport com.example.nutritionapp.database.IngredientDataSourceInterface\r\nimport com.example.nutritionapp.database.dto.IngredientDataClassDTO\r\nimport com.example.nutritionapp.maps.RecipeNotificationClassDomain\r\nimport com.example.nutritionapp.network.*\r\nimport com.example.nutritionapp.recipe.*\r\nimport com.example.nutritionapp.util.Result\r\nimport com.example.nutritionapp.util.wrapEspressoIdlingResource\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.squareup.moshi.Moshi\r\nimport com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory\r\nimport kotlinx.coroutines.*\r\nimport org.jetbrains.annotations.TestOnly\r\nimport java.net.URLEncoder\r\n\r\n\r\n/*\r\nTo get context inside a ViewModel we can either extend AndroidViewModel. Do not use ApplicationProvider in production code, only in tests\r\nhttps://stackoverflow.com/questions/51451819/how-to-get-context-in-android-mvvm-viewmodel\r\n */\r\n\r\nval selectedProductName = MutableLiveData<String>(\"Apple,flour,sugar\")\r\n\r\nclass IngredientViewModel(\r\n    val app: Application,\r\n    val ingredientRepository: IngredientDataSourceInterface, val nutritionApi: mNutritionApi\r\n) : AndroidViewModel(app) {\r\n\r\n//--------------------------------------------------------IngredientListOverview Fragment-----------------------------------------------\r\n    //Note: Don't set the MutableLiveData to null, b/c technically it is not initialized so any assignment will not change the null value\r\n    //and variable observing this MutableLiveData will return null\r\n\r\n    //flag for shopping cart image\r\n    private val _shoppingCartVisibilityFlag = MutableLiveData(true)\r\n    val shoppingCartVisibilityFlag: LiveData<Boolean>\r\n        get() = _shoppingCartVisibilityFlag\r\n\r\n    //flag for navigating once coroutine involving search recipe button in ingredientListFragment is finished\r\n    private val _navigatorFlag = MutableLiveData<Boolean>(false)\r\n    val navigatorFlag: LiveData<Boolean>\r\n        get() = _navigatorFlag\r\n\r\n    fun setNavigatorFlag(boolean: Boolean) {\r\n        _navigatorFlag.value = boolean\r\n    }\r\n\r\n    private val _viewVisibilityFlag = MutableLiveData<Boolean>(false)\r\n    val viewVisibilityFlag: LiveData<Boolean>\r\n        get() = _viewVisibilityFlag\r\n\r\n    private val _mutableLiveDataList: MutableLiveData<List<IngredientDataClass>> = MutableLiveData()\r\n\r\n    val mutableLiveDataList: LiveData<List<IngredientDataClass>>\r\n        get() = _mutableLiveDataList\r\n    @TestOnly\r\n    fun changedMutableLiveData( mList: List<IngredientDataClass>)\r\n    {\r\n        _mutableLiveDataList.postValue(mList)\r\n    }\r\n\r\n    private val _listOfSavedIngredients: MutableLiveData<List<IngredientDataClass>> =\r\n        MutableLiveData()\r\n    val listOfSavedIngredients: LiveData<List<IngredientDataClass>>\r\n        get() = _listOfSavedIngredients\r\n\r\n    //two-way binding\r\n    //no need to add \"?query=\" since the getIngredients() of the IngredientsApiInterface will do that\r\n    var searchItem = MutableLiveData<String>()\r\n\r\n    val foodInText = mutableListOf<String>()\r\n\r\n    private val _navigateToDetail = MutableLiveData<IngredientDataClass>()\r\n    val navigateToDetail: LiveData<IngredientDataClass>\r\n        get() = _navigateToDetail\r\n\r\n    fun setNavigateToDetail(ingredientItem: IngredientDataClass) {\r\n        selectedIngredient.value = ingredientItem\r\n        _quantityCounter.value = ingredientItem.quantity\r\n        _navigateToDetail.value = ingredientItem\r\n    }\r\n\r\n    fun setNavigateToDetailNull() {\r\n        _navigateToDetail.value = null\r\n    }\r\n\r\n    //--------------------------------------------------------mapGroceryReminder--------------------------------------------------------\r\n\r\n    private val _latLng = MutableLiveData<LatLng>()\r\n    val latLng: LiveData<LatLng>\r\n        get() = _latLng\r\n\r\n    fun setLatLng(latLng: LatLng) {\r\n        _latLng.value = latLng\r\n    }\r\n\r\n    private val _saveRecipeNotificationFlag = MutableLiveData(false)\r\n\r\n\r\n    //--------------------------------------------------------ingredientDetail Fragment ---------------------------------------------------\r\n    val selectedIngredient = MutableLiveData<IngredientDataClass>()\r\n\r\n    private val _quantityCounter = MutableLiveData<Int>(1)\r\n    val quantityCounter: LiveData<Int>\r\n        get() = _quantityCounter\r\n\r\n    fun increaseQuantityCounter() {\r\n        val temp = _quantityCounter.value?.plus(1)\r\n        _quantityCounter.value = temp\r\n        selectedIngredient.value?.quantity = temp!!\r\n    }\r\n\r\n    fun decreaseQuantityCounter() {\r\n        if (_quantityCounter.value!! > 0) {\r\n            //note - we need to reassign the mutableLiveData to a new variable for observers to observe a change in value\r\n            //you can't just update the existing value inside the mutableLiveData\r\n            val temp = _quantityCounter.value!!.minus(1)\r\n            _quantityCounter.value = temp\r\n            selectedIngredient.value?.quantity = temp\r\n        }\r\n    }\r\n\r\n    //--------------------------------------------------------recipeDetail Fragment ---------------------------------------------------\r\n    private val _missingIngredients = MutableLiveData<List<String>>()\r\n    val missingIngredients: LiveData<List<String>>\r\n        get() = _missingIngredients\r\n\r\n    private val _listOfStepsLiveData = MutableLiveData<List<String>>()\r\n    val listOfStepsLiveData: LiveData<List<String>>\r\n        get() = _listOfStepsLiveData\r\n\r\n    fun setMissingIngredientsNull() {\r\n        _missingIngredients.value = null\r\n    }\r\n\r\n    //--------------------------------------------------------SearchRecipe Fragment--------------------------------------------------------\r\n    //Q: Why does \"val listOfRecipesLiveData = MutableLiveData<List<RecipeIngredientResult>>(listOfRecipes)\" result in RecyclerView\r\n    //being empty?\r\n    //A: \"val listOfRecipesLiveData : MutableLiveData<List<RecipeIngredientResult>>? = null\" is explicitly setting the list<RecipeIngredientResult> value\r\n    //to null so that even if we add new values to the list<RecipeIngredientResult> the observers are not notified since MutableLiveData is still observing\r\n    //the same list. As such, you need to set a new list instead of updating the existing list since the list reference does not technically change when you\r\n    //add new values to the list so the observers are not notified. (?) \"MutableLiveData<List<RecipeIngredientResult>>()\" is correct because initially there\r\n    //is not value explicitly assigned to list<RecipeIngredientResult> so the first time a list is assigned the observers are signaled.\r\n    //A work around is offered at source: https://stackoverflow.com/questions/61834480/livedata-is-not-triggered-when-list-item-is-getting-updated\r\n\r\n\r\n    val _listOfRecipesLiveData = MutableLiveData<List<RecipeIngredientResult>>()\r\n    val listOfRecipesLiveData: LiveData<List<RecipeIngredientResult>>\r\n        get() = _listOfRecipesLiveData\r\n\r\n    val searchRecipeEditTextFlag = MutableLiveData(false)\r\n\r\n    fun setSearchRecipeEditTextClear() {\r\n        foodInText.clear()\r\n    }\r\n    //Two-way data binding\r\n    val listOfIngredientsString = MutableLiveData<String>()\r\n\r\n    private var _navigateToRecipeFlag = MutableLiveData(false)\r\n    val navigateToRecipeFlag: LiveData<Boolean>\r\n        get() = _navigateToRecipeFlag\r\n\r\n\r\n    private val _navigateToRecipe = MutableLiveData<RecipeIngredientResult>()\r\n    val navigateToRecipe: LiveData<RecipeIngredientResult>\r\n        get() = _navigateToRecipe\r\n\r\n    fun setNavigateToRecipe(recipe: RecipeIngredientResult) {\r\n        _navigateToRecipe.value = recipe\r\n    }\r\n\r\n    fun setNavigateToRecipeNull() {\r\n        _navigateToRecipe.value = null\r\n    }\r\n\r\n    fun setNavigateToRecipeFlag(boolean: Boolean) {\r\n        _navigateToRecipeFlag.value = boolean\r\n    }\r\n\r\n\r\n    //input is list of names i.e {\"Snapple Apple flavored drink 4oz\",\"Mott's Apple pudding 3oz\"}\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    fun detectFoodInText(listName: List<String>) {\r\n        wrapEspressoIdlingResource {\r\n            viewModelScope.launch {\r\n                _viewVisibilityFlag.value = true\r\n                try {\r\n                    for (i in listName) {\r\n                        //Note: For a post request, you can either provide a request body, passing in your text to the request body or you\r\n                        //can provide a text parameter within the suspend function in your API Interface.\r\n                        selectedProductName.value = URLEncoder.encode(i, \"utf-8\").toString()\r\n                        nutritionApi.setBody()\r\n                        Log.i(\"testURLEncoded: \", selectedProductName.value.toString())\r\n                        val listOfIngredients: PostRequestResultWrapper =\r\n                            nutritionApi.nutritionServicePost.detectFoodInText(\r\n                            )\r\n                        for (g in listOfIngredients.annotations) {\r\n                            Log.i(\"testURLAnnotation\", g.annotation)\r\n                            foodInText.add(g.annotation)\r\n                        }\r\n                    }\r\n                } catch (e: java.lang.Exception) {\r\n                    if (!isOnline(app)) {\r\n                        displayToast(\"Not connected to internet\")\r\n                    }\r\n                    Log.i(\"Exception\", \"$e\")\r\n                }\r\n\r\n                if (!foodInText.isEmpty()) {\r\n                    listOfIngredientsString.value = foodInText.joinToString(separator = \",\")\r\n                    _navigatorFlag.value = true\r\n                }\r\n                _viewVisibilityFlag.value = false\r\n            }\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    fun findRecipeByIngredients() {\r\n        val listOfRecipes = mutableListOf<RecipeIngredientResult>()\r\n        wrapEspressoIdlingResource {\r\n            viewModelScope.launch {\r\n                _viewVisibilityFlag.value = true\r\n                try {\r\n                    val resultWrapper: List<RecipeIngredientResult> =\r\n                        nutritionApi.nutritionService.findByIngredients(\r\n                            listOfIngredientsString.value!!\r\n                        )\r\n                    Log.i(\"testRecipeById\", \"recipe list size: ${resultWrapper.size}\")\r\n                    Log.i(\"testRecipeById\", \"recipe[0]: ${resultWrapper[0].title}\")\r\n                    for (i in resultWrapper) {\r\n                        listOfRecipes.add(i)\r\n                    }\r\n\r\n                    _listOfRecipesLiveData.value = listOfRecipes\r\n\r\n                } catch (e: java.lang.Exception) {\r\n                    if (!isOnline(app)) {\r\n                        displayToast(\"Not connected to internet\")\r\n                    }\r\n\r\n                    Log.i(\"Exception\", \"$e\")\r\n                }\r\n                _viewVisibilityFlag.value = false\r\n            }\r\n        }\r\n    }\r\n\r\n    //source: https://stackoverflow.com/questions/51141970/check-internet-connectivity-android-in-kotlin\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    fun isOnline(context: Context): Boolean {\r\n        val connectivityManager =\r\n            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n\r\n        val capabilities =\r\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {\r\n                Log.i(\"test\", \">M\")\r\n                connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork)\r\n            } else {\r\n                TODO(\"VERSION.SDK_INT < M\")\r\n            }\r\n        if (capabilities != null) {\r\n            if (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)) {\r\n                Log.i(\"Internet\", \"NetworkCapabilities.TRANSPORT_CELLULAR\")\r\n                return true\r\n            } else if (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)) {\r\n                Log.i(\"Internet\", \"NetworkCapabilities.TRANSPORT_WIFI\")\r\n                return true\r\n            } else if (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)) {\r\n                Log.i(\"Internet\", \"NetworkCapabilities.TRANSPORT_ETHERNET\")\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    fun loadIngredientListByNetwork() {\r\n        wrapEspressoIdlingResource {\r\n            Log.i(\"viewModel\",\"load called\")\r\n            var listOfNetworkRequestedIngredients: List<IngredientDataClass>? = null\r\n            viewModelScope.launch {\r\n                _viewVisibilityFlag.postValue(true)\r\n                if (searchItem.value != null) {\r\n                    try {\r\n                        val result: wrapperIngredientListNetworkDataClass =\r\n                            nutritionApi.nutritionService.getIngredients(searchItem.value!!)\r\n                        Log.i(\"test\", \"search item: ${searchItem.value}\")\r\n                        Log.i(\"test1\", \"Total products: ${result}\")\r\n\r\n                        listOfNetworkRequestedIngredients = result.toDomainType()\r\n                        Log.i(\"viewModel\", listOfNetworkRequestedIngredients!![0].name)\r\n                        _mutableLiveDataList.value = (listOfNetworkRequestedIngredients)\r\n                        Log.i(\"viewModelMutable\", _mutableLiveDataList.value!![0].name)\r\n\r\n                        Toast.makeText(\r\n                            app,\r\n                            \"networkRequestSuccess\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n\r\n                        val tempBool = false\r\n                        _shoppingCartVisibilityFlag.postValue(tempBool)\r\n\r\n                    } catch (e: Exception) {\r\n\r\n                        if (!isOnline(app)) {\r\n                            displayToast(\"Not connected to internet\")\r\n                        }\r\n                        println(\"Error: ${e.message}\")\r\n                    }\r\n                }\r\n                _viewVisibilityFlag.postValue(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun displayToast(mString: String) {\r\n        Toast.makeText(\r\n            app,\r\n            mString,\r\n            Toast.LENGTH_SHORT\r\n        ).show()\r\n    }\r\n\r\n    fun saveRecipeNotification(recipeNotificationClassDomain: RecipeNotificationClassDomain) {\r\n\r\n        viewModelScope.launch {\r\n            ingredientRepository.saveNotificationRecipe(\r\n                RecipeNotificationClassDomain(\r\n                    recipeName = recipeNotificationClassDomain.recipeName,\r\n                    missingIngredients = recipeNotificationClassDomain.missingIngredients,\r\n                    mId = recipeNotificationClassDomain.mId\r\n                )\r\n            )\r\n            _saveRecipeNotificationFlag.value = true\r\n        }\r\n    }\r\n\r\n    val mFlag = MutableLiveData(false)\r\n    fun getRecipeInstructions() {\r\n        val listOfIngredientNameInInstruction = mutableListOf<String>()\r\n\r\n        val listOfSteps = mutableListOf<String>()\r\n\r\n        wrapEspressoIdlingResource {\r\n            viewModelScope.launch {\r\n\r\n                //Note: So the issue here was that the coroutine has not finished running. The solution was to make the network request function a\r\n                // regular function to make it blocking Since the network function was initially a suspend function, the rest of the code was\r\n                // proceeding under the assumption that \"resultInstructions\" was null. Even if \"resultInstructions\" returns a value the rest\r\n                // of the code logic had already ran. So the solution was to make \"resultInstructions\" blocking.\r\n\r\n                //Coroutines execute synchronously so the CoroutineScope of the Main thread will ensure that the job in Dispatchers.IO is\r\n                //finished first before proceeding.\r\n                //avoids NetworkOnMainThread exception error by running on a non-Main thread\r\n                //Q: Why is this working but not the previous network request format?\r\n                val networkResult: List<RecipeInstruction>? =\r\n                    _navigateToRecipe.value?.id?.let {\r\n                        nutritionApi.nutritionService.getRecipeInstructions(it, false)\r\n                    }\r\n\r\n                //iterates over each sub recipe i.e recipe for cake and recipe for frosting\r\n                if (!networkResult.isNullOrEmpty()) {\r\n\r\n                    for (i in networkResult) {\r\n                        //adds title of sub recipes i.e frosting recipe in a cake recipe\r\n                        if (i.name?.length!! > 0)\r\n                            listOfSteps.add(i.name)\r\n\r\n                        //iterates over \"RecipeInstruction\" to add the instructions steps into a list\r\n                        for (steps in i.steps!!) {\r\n                            //collects the ingredients mentioned in the recipe instructions\r\n                            for (name in steps.ingredients!!) {\r\n                                if (!name.name.isNullOrEmpty()) {\r\n                                    listOfIngredientNameInInstruction.add(name.name)\r\n                                }\r\n                            }\r\n                            steps.step?.let { listOfSteps.add(it) }\r\n                        }\r\n                    }\r\n\r\n                    _listOfStepsLiveData.value = listOfSteps\r\n                    val removeDuplicates = listOfIngredientNameInInstruction.toSet().toList()\r\n                    _missingIngredients.value = removeDuplicates.minus(\r\n                        foodInText\r\n                    )\r\n                    mFlag.value = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun saveIngredientItem() {\r\n        if (selectedIngredient.value != null && selectedIngredient.value?.quantity!! >= 0) {\r\n            wrapEspressoIdlingResource {\r\n                viewModelScope.launch {\r\n                    selectedIngredient.value?.let { ingredientRepository.saveNewIngredient(it) }\r\n                }\r\n            }\r\n        } else\r\n            Toast.makeText(app, \"Invalid quantity\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    fun getLocalIngredientList() { //need DAO and repository\r\n        Log.i(\"test\", \"getLocalList called\")\r\n        wrapEspressoIdlingResource {\r\n            viewModelScope.launch {\r\n\r\n                val ingredientResult: Result<List<IngredientDataClassDTO>> =\r\n                    ingredientRepository.getIngredients()\r\n                when (ingredientResult) {\r\n                    is Result.Success<*> -> {\r\n                        val dataList = ArrayList<IngredientDataClass>()\r\n                        dataList.addAll((ingredientResult.data as List<IngredientDataClassDTO>).map { result ->\r\n                            //map the reminder data from the DB to the be ready to be displayed on the UI\r\n                            IngredientDataClass(\r\n                                id = result.id,\r\n                                name = result.name,\r\n                                quantity = result.quantity,\r\n                                imageUrl = result.image,\r\n                                imageType = result.imageType\r\n                            )\r\n                        })\r\n                        _listOfSavedIngredients.postValue(dataList)\r\n                    }\r\n                    is Result.Error -> {\r\n                        Log.i(\"test\", \"empty repository\")\r\n//                Toast.makeText(ApplicationProvider.getApplicationContext(),\"${ingredientResult.message}\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun clearRecipeNotificationTable() {\r\n        wrapEspressoIdlingResource {\r\n            viewModelScope.launch {\r\n                ingredientRepository.clearNotificationRecipe()\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nutritionapp/ingredientlist/IngredientViewModel.kt b/app/src/main/java/com/example/nutritionapp/ingredientlist/IngredientViewModel.kt
--- a/app/src/main/java/com/example/nutritionapp/ingredientlist/IngredientViewModel.kt	(revision 7605b6b519fc8446ffb44dbc81ef0e6f5d4b920a)
+++ b/app/src/main/java/com/example/nutritionapp/ingredientlist/IngredientViewModel.kt	(date 1640555729773)
@@ -28,7 +28,7 @@
 import kotlinx.coroutines.*
 import org.jetbrains.annotations.TestOnly
 import java.net.URLEncoder
-
+import kotlinx.coroutines.flow.*
 
 /*
 To get context inside a ViewModel we can either extend AndroidViewModel. Do not use ApplicationProvider in production code, only in tests
@@ -66,8 +66,9 @@
 
     private val _mutableLiveDataList: MutableLiveData<List<IngredientDataClass>> = MutableLiveData()
 
-    val mutableLiveDataList: LiveData<List<IngredientDataClass>>
+    val mutableLiveDataList: MutableStateFlow<List<IngredientDataClass>>
         get() = _mutableLiveDataList
+
     @TestOnly
     fun changedMutableLiveData( mList: List<IngredientDataClass>)
     {
@@ -192,7 +193,6 @@
         _navigateToRecipeFlag.value = boolean
     }
 
-
     //input is list of names i.e {"Snapple Apple flavored drink 4oz","Mott's Apple pudding 3oz"}
     @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
     fun detectFoodInText(listName: List<String>) {
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1640553530629)
+++ b/.idea/compiler.xml	(date 1640553530629)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RemoteRepositoriesConfiguration\">\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"central\" />\r\n      <option name=\"name\" value=\"Maven Central repository\" />\r\n      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"jboss.community\" />\r\n      <option name=\"name\" value=\"JBoss Community repository\" />\r\n      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"BintrayJCenter\" />\r\n      <option name=\"name\" value=\"BintrayJCenter\" />\r\n      <option name=\"url\" value=\"https://jcenter.bintray.com/\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"Google\" />\r\n      <option name=\"name\" value=\"Google\" />\r\n      <option name=\"url\" value=\"https://dl.google.com/dl/android/maven2/\" />\r\n    </remote-repository>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
--- a/.idea/jarRepositories.xml	(revision 7605b6b519fc8446ffb44dbc81ef0e6f5d4b920a)
+++ b/.idea/jarRepositories.xml	(date 1640553587125)
@@ -21,5 +21,10 @@
       <option name="name" value="Google" />
       <option name="url" value="https://dl.google.com/dl/android/maven2/" />
     </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
   </component>
 </project>
\ No newline at end of file
